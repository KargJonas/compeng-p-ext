Base knowledge for llvm mod:
  - 8/16-bit wide reg split supported
  - P is likely part of the unprivileged instructions
  - we should prob limit to one quantization and one instructions
  - Spike supports v0.9.2 (recent enough)
  - the bulk of the work will be in extending llvm's backend
  - the most interesting files are in llvm/lib/Target/RISCV
    - RISCVInstrInfo.td		(define new instructions)
    - RISCVISelLowering.td
    - RISCVMCTargetDesc.td
    - RISCVISelLowering.td	(lowering)
    - RISCVIntrinsics.td	(intrinsics)

A good starting point before we even mess with LLVM might be to write
and run some RISC-V asm using the P-extension to get a feel for it.


Build and run with gnu/spike:

$ # build the riscv-gnu-toolchain with special forks of riscv-binutils and riscv-gcc for p support
$
$ git clone https://github.com/riscv-collab/riscv-gnu-toolchain riscv-collab-gnu-toolchain
$ cd riscv-collab-gnu-toolchain
$ git clone https://github.com/plctlab/riscv-gcc -b riscv-gcc-p-ext riscv-gcc-p-ext
$ git clone https://github.com/plctlab/riscv-binutils-gdb -b riscv-binutils-p-ext riscv-binutils-p-ext
$ ./configure --prefix=`pwd`/build --with-arch=rv64imafd_zpn --with-abi=lp64d --with-gcc-src=`pwd`/riscv-gcc-p-ext --with-binutils-src=`pwd`/riscv-binutils-p-ext
$ make
$ export RISCV=/workspace/riscv-collab-gnu-toolchain/build
$ export PATH=$RISCV/bin:$PATH
$
$ # compile and link assembly file
$
$ riscv64-unknown-elf-as -march=rv64imafd_zpn -o main.o main.S
$ riscv64-unknown-elf-ld -o main main.o -Ttext=0x80000000 --entry=_start
$ spike $PK main
